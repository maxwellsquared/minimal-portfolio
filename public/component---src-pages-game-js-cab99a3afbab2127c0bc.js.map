{"version":3,"file":"component---src-pages-game-js-cab99a3afbab2127c0bc.js","mappings":"mLAIWA,EAAc,sCACdC,EAAc,sCCoBzB,EArBe,SAAH,GAAiC,IAA3BC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SACzB,OACI,uBAAKC,UDLU,mCCMX,2BACI,sBAAIA,UDFE,mCCGF,sBAAIA,UAAWJ,GAAa,gBAAC,KAAI,CAACK,GAAG,IAAID,UAAWH,GAAY,SAChE,sBAAIG,UAAWJ,GAAa,gBAAC,KAAI,CAACK,GAAG,SAASD,UAAWH,GAAY,UACrE,sBAAIG,UAAWJ,GAAa,gBAAC,KAAI,CAACK,GAAG,aAAaD,UAAWH,GAAY,cACzE,sBAAIG,UAAWJ,GAAa,gBAAC,KAAI,CAACK,GAAG,wCAAwCD,UAAWH,GAAY,WACpG,sBAAIG,UAAWJ,GAAa,gBAAC,KAAI,CAACK,GAAG,sCAAsCD,UAAWH,GAAY,eAI1G,4BACI,sBAAIG,UDhBC,iCCgBoBF,GACxBC,GAIjB,C,+EC6HaG,G,QAAO,WAAH,OAAS,gDAAgC,GAE1D,mB","sources":["webpack://minimal-portfolio/./src/components/layout.module.css","webpack://minimal-portfolio/./src/components/layout.js","webpack://minimal-portfolio/./src/pages/game.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var heading = \"layout-module--heading--f158c\";\nexport var headshot = \"layout-module--headshot--a6b4c\";\nexport var navLinkItem = \"layout-module--nav-link-item--a5f0a\";\nexport var navLinkText = \"layout-module--nav-link-text--69cda\";\nexport var navLinks = \"layout-module--nav-links--1113b\";","import * as React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { container, heading, navLinks, navLinkItem, navLinkText } from './layout.module.css'\r\n\r\nconst Layout = ({ pageTitle, children }) => {\r\n    return (\r\n        <div className={container}>\r\n            <nav>\r\n                <ul className={navLinks}>\r\n                    <li className={navLinkItem}><Link to=\"/\" className={navLinkText}>Home</Link></li>\r\n                    <li className={navLinkItem}><Link to=\"/about\" className={navLinkText}>About</Link></li>\r\n                    <li className={navLinkItem}><Link to=\"/portfolio\" className={navLinkText}>Portfolio</Link></li>\r\n                    <li className={navLinkItem}><Link to=\"https://www.github.com/maxwellsquared\" className={navLinkText}>Github</Link></li>\r\n                    <li className={navLinkItem}><Link to=\"https://www.linkedin.com/in/kuhnmax\" className={navLinkText}>LinkedIn</Link></li>\r\n\r\n                </ul>\r\n            </nav>\r\n            <main>\r\n                <h1 className={heading}>{pageTitle}</h1>\r\n                {children}\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout;","import * as React from \"react\";\r\nimport Layout from \"../components/layout\";\r\n\r\nconst GamePage = () => {\r\n    return (\r\n        <Layout pageTitle=\"My Neat Game\">\r\n            <section>\r\n                <p aria-hidden=\"true\">üé∏üåàüíªüßô‚Äç‚ôÇÔ∏èüìöüéÆüéß</p>\r\n                <p>\r\n                    Over the past year, I‚Äôve fallen in love with a new kind of\r\n                    video game: something halfway between a mobile game from the\r\n                    iPhone 3G era and a traditional indie game, or a roguelike\r\n                    and an arcade game. These things are snackable, usually with\r\n                    simple graphics (Vampire Survivors, probably the biggest\r\n                    example of the genre, started with art from an asset pack)\r\n                    and satisfying mechanics that offer some kind of persistent\r\n                    upgrades as incentive to complete bite-sized runs. If\r\n                    triple-A games are bloated early-70s prog rock albums, these\r\n                    games are the first Ramones album: 29 minutes long, recorded\r\n                    in a week for $6400, and nothing but bangers. Like that\r\n                    Ramones album, the best part is that it makes you think,\r\n                    ‚ÄúHey, I could do this,‚Äù so I did.\r\n                </p>\r\n                <p>\r\n                    Or, at least, I‚Äôm doing it. It‚Äôs not done yet‚ÄìI still have a\r\n                    lot of features to add, but you can fly a ship around and\r\n                    shoot things with mostly complete effects and controls and\r\n                    scoring.\r\n                </p>\r\n\r\n                <p>Here‚Äôs my process so far.</p>\r\n                <h2>Initial Planning</h2>\r\n\r\n                <p>\r\n                    I started by thinking about a simple gameplay loop I was\r\n                    reasonably sure I could accomplish in a few weeks while\r\n                    teaching myself some new programming concepts. I‚Äôve been\r\n                    wanting to build a Survivors-like for a while; the mechanics\r\n                    are simple yet satisfying, and I can think of a ton of ways\r\n                    to tweak them slightly and end up with a whole new game. I\r\n                    decided that combining bullet-heaven-style upgrades with\r\n                    rail shooting √† la Star Fox 64 would be something fun,\r\n                    original, and within my capabilities.\r\n                </p>\r\n\r\n                <p>\r\n                    I find when building projects that my favourite approach is\r\n                    to start with a minimum viable product and then add features\r\n                    and functionality. Eventually, I settled on the following\r\n                    objectives for my MVP:\r\n                </p>\r\n                <ul>\r\n                    <li>Have a rail system moving the camera along‚Ä¶</li>\r\n                    <li>\r\n                        ‚Ä¶where the player can move horizontally and vertically\r\n                        while the gameplay plane moves through the level (think\r\n                        Star Fox 64)...\r\n                    </li>\r\n                    <li>And can fire bullets in a straight line‚Ä¶</li>\r\n                    <li>To kill bad guys.</li>\r\n                </ul>\r\n\r\n                <p>\r\n                    I know that I tend to get caught up having fun with details,\r\n                    and adding a bunch of cool weapons and upgraded stats was\r\n                    something that I‚Äôd absolutely get bogged down in. I‚Äôm\r\n                    looking forward to setting that up after the initial\r\n                    mechanics are rock-solid, but for now I‚Äôm keeping the\r\n                    roguelike stuff for later.\r\n                </p>\r\n\r\n                <h2>Gameplay Plane and Movement</h2>\r\n\r\n                <p>\r\n                    My first task was to implement a gameplay plane that moved\r\n                    along on rails, with the player able to control horizontal\r\n                    and vertical movement of their ship.\r\n                </p>\r\n\r\n                <p>\r\n                    One of my first big design decisions was that I wanted the\r\n                    player to move in a loop through the level instead of having\r\n                    a linear track with a beginning and end. I liked the idea of\r\n                    the player‚Äôs progress being measured in terms of time, not\r\n                    space‚Äìit would make playing the same levels over and over\r\n                    feel more natural, and it meant that I could design my\r\n                    levels without needing to keep tight integration with the\r\n                    rest of what I was doing.\r\n                </p>\r\n\r\n                <p>\r\n                    This did mean that I‚Äôd need to make sure that when the rail\r\n                    for my rail shooter made a turn, I‚Äôd have to keep the player\r\n                    and camera pointing the right way:\r\n                </p>\r\n                <StaticImage\r\n                    width=\"600\"\r\n                    alt=\"Game interface on a track with a camera and a rocket ship\"\r\n                    src=\"https://github.com/maxwellsquared/minimal-portfolio/blob/main/img/pai1.jpg?raw=true\"\r\n                />\r\n\r\n                <p>\r\n                    I decided the easiest solution for this would be to put\r\n                    everything into a GameplayPlane object which I would send\r\n                    down a track. Inside the GameplayPlane would be the camera,\r\n                    player, and anything else I needed. I would use local values\r\n                    like transform.localPosition to move things relative to the\r\n                    mine cart everything was crammed into.\r\n                </p>\r\n\r\n                <p>\r\n                    I also decided to use Cinemachine‚Äôs dolly track and dolly\r\n                    cart to build my track--I found a Mix and Jam video where\r\n                    they used this setup and it looked like it would fit my\r\n                    needs nicely. The track system is very handy and let me\r\n                    easily set up a track around the terrain I‚Äôd quickly\r\n                    sculpted.\r\n                </p>\r\n\r\n                <StaticImage\r\n                    width=\"600\"\r\n                    alt=\"Google Doc interface showing an AI score\"\r\n                    src=\"https://github.com/maxwellsquared/minimal-portfolio/blob/main/img/pai1.jpg?raw=true\"\r\n                />\r\n\r\n                <p>\r\n                    It came paired with a dolly cart, and I put a reference to\r\n                    that cart in the GameplayPlane script. Once per frame (on\r\n                    Update()), the GameplayPlane object would move itself to\r\n                    wherever the dollyCart was and match the dollyCart‚Äôs\r\n                    side-to-side rotation.\r\n                </p>\r\n\r\n                <p>\r\n                    All the other stuff in the cart, being children, would\r\n                    automatically be moved and rotated as well. The player\r\n                    object also got a function to move horizontally or\r\n                    vertically: if joystick or mouse input was detected, it\r\n                    would put that input into a variable h or v and pass it\r\n                    along to a LocalMove function along with a speed value,\r\n                    which added those variables as a Vector3 to the object‚Äôs\r\n                    transform.localPosition:\r\n                </p>\r\n            </section>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport const Head = () => <title>Max Kuhn - About</title>;\r\n\r\nexport default AboutPage;\r\n"],"names":["navLinkItem","navLinkText","pageTitle","children","className","to","Head"],"sourceRoot":""}